Software Requirements:
 jdk 1.7 with Maven. (The only dependency maven requires is JUnit, refer pom.xml. JDK 1.7 plugin is specified)

This project is in structured as per Maven format: https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html

How to run:
 1. open command terminal
 2. navigate to projects root folder
 3. execute mvn test

Reports:
 1. Sure fire test reports can be access after running the tests; in the generated target/surefire-reports
 2. A single test report for easy reference can be generated by executing "mvn surefire-report:report" this report will be available in generated target/site folder. If Sonar server is available sonar reports can be generated using mvn sonar:sonar command.

__________________________________________________________
What is the architecture of the provided App?

1. This application uses State pattern to represent the state of the machine. A machine can have several states some of the states include:
	a. Initial State
	b. Select Product State
	c. Pay State
	d. Distatch State
Included a high level Finite State Machine Diagram (vending-machine-fsm.pdf) for reference. Detailed information about the behaviour of the machine is included in the javadoc comments. 
Comments JUnit classes also describes the expected behaviour of the system.
 
2. The other patterns that the application uses are Singleton pattern (For classes in the Products, Coins and Enum in the package com.machine.entity).

3. Enums are used to represent the Coin and Product.

__________________________________________________________  
How does the provided code meet the specification?

The code has comments and JUnit class to explain the specification as much as possible. There are a total of 38 junit cases that execute the state of a machine and their possible outcome, The test cases also test for other conditions like invalid coin, track the product, track how many coins are their in the machine. 

For easier reference I've included some comments below to map the Spec with the code.

Following extracts from the specification are used to explain:

(i) "The vending machine accepts money in the form of Ten Pence, Twenty Pence, Fifty Pence and Pound coins."
Coin enum type, has constants for  Ten Pence, Twenty Pence, Fifty Pence and Pound coins. Apart from these coins all other coins are not accepted, either they be US currency or a 5 pence UK coin.
The Coin enum type has helper methods including:
	- getCurrentCostFormat which displays currency in UK format.
	- getEnum and a calculateChange method for given money. 

The test cases (available in folder src/main/test) for coin include com.machine.entity.CoinTest The test cases in this class include putting an invalid coin, set a coin value and get a coin value.

(ii) "You must have 3 items that cost £0.60, £1.00, and £1.70."
Similar to Coin there is Product enum type and respective JUnit class.

(iii) "The user may hit a “coin return” button to get back the money they’ve entered so far. If you put more money in than the item’s price, you get change back."
The Machine interface implemented by VendingMachine has a ejectCoins method which based on current state behaves differently, for instance:
	- If the current state of the machine is switched off the coins are just given back refer SwitchedOffState#ejectCoins()
	- If the current state of the machine is taking an order and returning the change than it ejectCoins() does exactly that in InsertCoinsState#ejectCoins()
There are test cases spread across all the respective State implemented interface that confirms to ejectCoins behaviour. Please refer to src/test/java folder and package package com.machine.states and also refer to the class ChangeReturnAndInvalidCoinTest.

(iv) "The machine can also be turned on and off."
The respective State implementation and JUnit demonstrates this refer SwitchedOffState, InitialState and their JUnit class SwitchedOffStateTest and InitialStateTest.


(v) "The valid set of actions on the vending machine is: INSERT MONEY – Ten Pence, Twenty Pence, Fifty Pence, Pound"
Refer InsertCoinsState and its JUnit Class.

(vi) "The valid set of actions on the vending machine is: COIN RETURN – returns all inserted money"
Implemented across all states based on the state the machine is in.

(vii) "The valid set of actions on the vending machine is: GET-A, GET-B, GET-C – selects item A (£0.60), B (£1), or C (£1.70)"
Refer to InitialState class and it JUnit class.

(viii) "The valid set of actions on the vending machine is: * TURN-ON, TURN-OFF – turns the machine on and off
Refer to SwitchedOff State and point (vii) above.

(ix) "The valid set of responses from the vending machine is: Ten Pence, Twenty Pence, Fifty Pence, Pound – return coin"
This is implemented in ejectCoins method implemented across all the states. And demonstrated in respective JUnits.

(x) "The valid set of responses from the vending machine is: A, B, C – vend item A, B, or C"
This is demonstrated in dispense method implemented across all the states. A custom message is logged for InsertCoinsState#dispense

(xi) "The vending machine must track the following state: Available items – each item has a count, a price, and a selector (A, B or C)"
Machine HAS-A product for tracking. Tracking is enabled for Product in the Products class. This is a singleton class with hardcoded static list. Refer to JUnit ProductsTest for demo.

(xii) "The vending machine must track the following state: Currently inserted money"
Machine HAS-A coin for tracking. currently inserted money can be retrieved at any point of a state from the getter. The test cases are spread across.

(xiii) "The vending machine must track the following state: Whether the machine is on or off"
VendingMachine HAS-A State from which ON/OFF can be determined.
 
